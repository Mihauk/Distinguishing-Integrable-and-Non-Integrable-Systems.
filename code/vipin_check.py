import sys
import pickle
import numpy as np
import scipy as sc
import common as cm
from numpy import linalg as la
import matplotlib.pyplot as plt

def pulse(i=1, m=0):
	P = 1/np.sqrt(2)
	if i == 1:
		P = np.dot(P,(I - 2j*cm.spin("Y", c, N)))
	elif i == 2:
		#P = P**l
		#for ii in range(l):
		P = np.dot(P,(I - 2j*cm.spin("Y", (1+c+m), N)))
	return (P)

N = 10
c = 2
d = 5
#l = 1
J = 1
#J_p = 0.1*J
#t_max = 8
Ngrid = 200
samples = 50
dis_sam = 11
#dt = np.linspace(0, t_max, Ngrid)
dt = np.logspace(-1, 20, Ngrid)

I = cm.spin("I", 0, N)

sigma_z_1 = cm.spin("Z", c, N)
D = np.zeros((dis_sam, samples, d, Ngrid))
#sp = np.zeros((dis_sam, samples, Ngrid))

h_v = np.zeros((11, 10))
h_v[0,:] = np.array([0.6814285841831236,3.398808402811298,3.3309974608770574,-11.35261583333935,-13.131754327085886,17.874099083232636,17.54206311303828,19.916980959949584,21.709631143009787,14.278659036954437])/2
h_v[1,:] = np.array([1.1084733201969499,15.675248178160345,4.865882767501844,1.1319415918649014,-22.072446448866465,1.4285122353266502,5.364400513552354,4.080248959783447,-11.040006428542668,-1.4569341175304373])/2
h_v[2,:] = np.array([2.7538884443760736,11.49601290978832,-21.587129805677563,-21.14476364971295,-19.310933572656097,-16.53940340251858,-3.4988814035784515,9.519755543269738,-7.714719843979694,-18.850543821780363])/2
h_v[3,:] = np.array([3.9193886317438,-1.2531376870036866,3.9418987885118213,1.0181132732230793,0.34621800560250904,-0.4018855241392032,-17.68360283658297,6.621142892204972,12.278369797430727,-18.14791543374198])/2
h_v[4,:] = np.array([18.118015096009728,-13.034429697094232,-14.338086003504245,-3.7408978663567183,-16.545712586601844,-3.768254281780486,4.1377537512150155,-0.2115293115697341,-22.915105675806323,-8.285100995333622])/2
h_v[5,:] = np.array([19.707505388362264,-19.15437045593041,-8.435171578914094,-13.723510346241717,-15.907488176453313,3.518246120210975,-14.50511105640949,3.176978577541462,8.40284251342706,-3.8757279543899017])/2
h_v[6,:] = np.array([-8.601966655893193,6.40149062619804,1.1309026363206698,5.6316375493298665,-0.6396675797720235,2.7537058414729643,-13.454076812566917,4.182694299231997,-22.189946761828352,0.9905781396353603])/2
h_v[7,:] = np.array([13.877317238737461,-6.055515996922267,-21.07769395586,-14.322398605708699,-16.835304045934862,-3.9806073606726784,-9.203405030992883,-9.261903826932965,11.816497778386662,19.270244145507576])/2
h_v[8,:] = np.array([-12.269723249510044,18.270977460998054,16.43116336262591,21.58405607983366,7.4110555556299005,14.591395199406179,14.666769735651812,8.355993169110747,22.882529635119695,-7.986211640988557])/2
h_v[9,:] = np.array([6.760613252718201,4.055211937168011,8.023970032710764,-8.67877895792087,-15.820419295107321,-11.941890411259358,-5.620243949509202,10.46113052142762,4.814348102269449,6.170751922400001])/2
h_v[10,:] = np.array([-17.21987651944633,22.845984700017695,19.299009860085306,-10.652597775727273,-11.635165096594356,-18.662625983037188,-22.969649374276592,-17.089095076518376,-7.774111405708567,-7.7174703447350765])/2



for m in range(d):
	print(m)
	#sys.stdout.flush()
	P_pio2_1 = pulse(1,m)
	P_pio2_2 = pulse(2,m)
	P_pi_1 = np.dot(P_pio2_1, P_pio2_1)
	P_pi_2 = np.dot(P_pio2_2, P_pio2_2)
	for k in range(dis_sam):
		print(k)
		H = cm.h_rfh_obc( J, N, h_v[k,:])
		#H = cm.h_rfxxz_obc( J, J_p, N, h_v)
		e, v = la.eigh(H)
		v_dagg = np.conj(v.T)

		for j in range(samples):
			s = 1
			r = np.random.randint(2, size=N)
			r[c] = 1
			for ii in range(N):
				if r[ii] == 1:
					s = np.kron(s,cm.up)
				else:
					s = np.kron(s,cm.down)
			psi_0 = s
			phi_0 = np.dot(P_pio2_1,psi_0)
			for i in range(Ngrid):
				'''
				if(m==0):
					phi_t_s = np.dot(P_pi_1, cm.psi_at_t( e, v, v_dagg, dt[i]/2, phi_0))
					chi_t_s = np.dot(P_pio2_1,cm.psi_at_t( e, v, v_dagg, dt[i]/2, phi_t_s))
					chi_t_s_dagg = np.conj(chi_t_s.T)
					sp[k, j, i] = cm.check_real(np.dot(chi_t_s_dagg, np.dot(sigma_z_1,chi_t_s)))'''
				phi_t = np.dot(P_pi_1,np.dot(P_pi_2,cm.psi_at_t( e, v, v_dagg, dt[i]/2, phi_0)))
				chi_t = np.dot(P_pio2_1,cm.psi_at_t( e, v, v_dagg, dt[i]/2, phi_t))
				chi_t_dagg = np.conj(chi_t.T)
				D[k, j, m, i] = cm.check_real(np.dot(chi_t_dagg, np.dot(sigma_z_1,chi_t)))

with open('/home/abhishek/Documents/ny project/data/new/vipin/vipin_sample_N'+str(N)+'_eav50_dis11_d_rel_tsi_s13_d5_rc_Ngrid200.pickle', 'wb') as data:
	pickle.dump([dt, D], data)